// Requires helm, kubectl, terraform, aws cli v2 in runtime

pipeline {
    agent any

    environment {
        PATH                = "/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
        AWS_DEFAULT_REGION  = 'us-east-1'
        EKS_CLUSTER_NAME    = 'challenge-eks-cluster'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/jeffmeager/K8s.git', branch: 'main'
            }
        }

        stage('Terraform & Deploy') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                    string(credentialsId: 'mongodb-username', variable: 'TF_VAR_mongodb_username'),
                    string(credentialsId: 'mongodb-password', variable: 'TF_VAR_mongodb_password'),
                    string(credentialsId: 'github_token', variable: 'TF_VAR_github_token'),
                    string(credentialsId: 'github_token', variable: 'github_token'),
                    string(credentialsId: 'cloudflare_api_token', variable: 'cloudflare_api_token'),
                    string(credentialsId: 'mongodb_secret_key', variable: 'TF_VAR_mongodb_secret_key')
                ]) {
                    script {
                        // Define mongodb_ip variable at this scope so it is visible across steps
                        def mongodb_ip = ''

                        dir('terraform') {
                            sh """
                                set -o errexit -o pipefail -o nounset
                                terraform init \
                                -backend-config="bucket=jeffmeager-challenge-terraform-state-bucket" \
                                -backend-config="key=challenge/terraform.tfstate" \
                                -backend-config="region=ap-southeast-2"

                                terraform apply -auto-approve \
                                    -var="region=${AWS_DEFAULT_REGION}"
                            """

                            // Capture Terraform output inside terraform dir
                            mongodb_ip = sh(script: 'terraform output -raw mongodb_instance_public_ip', returnStdout: true).trim()
                        }

                        // refresh kubeconfig to use the new EKS cluster
                        sh '''
                            set -o errexit -o pipefail -o nounset
                            echo "üîß Updating kubeconfig..."
                            aws eks --region ${AWS_DEFAULT_REGION} \
                              update-kubeconfig \
                              --name ${EKS_CLUSTER_NAME}
                        '''

                        // Wait for nodes ready (prevents race conditions)
                        sh '''
                            set -o errexit -o pipefail -o nounset
                            echo "‚è≥ Waiting for EKS nodes to be Ready..."
                            kubectl wait --for=condition=Ready node --all --timeout=120s
                        '''

                        // Add PAT secret to call private repo
                        sh '''
                            set -o errexit -o pipefail -o nounset
                            kubectl create secret docker-registry ghcr-pull-secret \
                                --docker-server=ghcr.io \
                                --docker-username="jeffmeager" \
                                --docker-password=$github_token \
                                --docker-email=your-email@example.com \
                                --dry-run=client -o yaml | kubectl apply -f -
                        '''

                        // Install CSI Driver and AWS Provider
                        sh '''
                            echo "üì¶ Adding Helm repos..."
                            set -o errexit -o pipefail -o nounset
                            helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts || true
                            helm repo add aws-secrets-provider https://aws.github.io/secrets-store-csi-driver-provider-aws || true
                            helm repo update

                            echo "üîç Checking if CSI Driver is already installed..."
                            if ! helm status csi-secrets-store -n kube-system > /dev/null 2>&1; then
                                echo "üöÄ Installing CSI Driver..."
                                helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
                                --namespace kube-system \
                                --version 1.3.4 \
                                --create-namespace \
                                --wait \
                                --set syncSecret.enabled=true \
                                --set enableSecretRotation=true \
                                --set enableCSIStorageCapacity=true
                            else
                                echo "‚úÖ CSI Driver already installed. Skipping."
                            fi

                            echo "üîç Checking if AWS Provider is already installed..."
                            if ! helm status secrets-store-csi-driver-provider-aws -n kube-system > /dev/null 2>&1; then
                                echo "üîê Installing AWS Provider..."
                                helm install secrets-store-csi-driver-provider-aws aws-secrets-provider/secrets-store-csi-driver-provider-aws \
                                --namespace kube-system \
                                --version 0.2.0 \
                                --wait
                            else
                                echo "‚úÖ AWS Provider already installed. Skipping."
                            fi
                        '''

                        // Apply Kubernetes manifests
//                        dir('kubernetes/deployments') {
//                            sh '''
//                                set -o errexit -o pipefail -o nounset
//                                kubectl apply -f cluster-admin-rolebinding.yaml
//                            '''
//                        }

                        // Apply webapp-secret.yaml with substituted variables
                        dir('kubernetes/deployments') {
                            def mongodb_username = env.TF_VAR_mongodb_username
                            def mongodb_password = env.TF_VAR_mongodb_password
                            def mongodb_secret_key = env.TF_VAR_mongodb_secret_key

                            sh """
                                set -o errexit -o pipefail -o nounset

                                echo "üìÑ Preparing webapp-secret.yaml with injected values..."

                                export MONGODB_USERNAME='${mongodb_username}'
                                export MONGODB_PASSWORD='${mongodb_password}'
                                export MONGODB_IP='${mongodb_ip}'
                                export MONGO_SECRET_KEY='${mongodb_secret_key}'

                                envsubst < webapp-secrets.yaml.tpl > webapp-secrets.yaml

                                echo "üîê Applying webapp-secrets.yaml..."
                                kubectl apply -f webapp-secrets.yaml
                            """
                        }

                        // Apply webapp deployment
//                        dir('kubernetes/deployments') {
//                           sh '''
//                                set -o errexit -o pipefail -o nounset
//                                kubectl apply -f webapp-sa.yaml
//                                kubectl apply -f webapp-deployment.yaml

//                                echo "‚è≥ Waiting for webapp-deployment to be Ready..."
//                                kubectl rollout status deployment webapp-deployment --timeout=120s
//                            '''
//                        }

                        // Apply webapp service
//                        dir('kubernetes/services') {
//                            sh '''
//                                set -o errexit -o pipefail -o nounset
//                                kubectl apply -f webapp-service.yaml
//                            '''
//                        }
                    }  // END script
                }  // END withCredentials
            }  // END steps
        }  // END stage
    }  // END stages

    post {
        success {
            echo 'üöÄ Infrastructure and workloads successfully deployed'
        }
        failure {
            echo '‚ö†Ô∏è Deployment encountered issues'
        }
    }
}
