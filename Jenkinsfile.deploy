pipeline {
    agent any

    environment {
        PATH                = "/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
        AWS_PROFILE         = 'devops-admin'
        AWS_DEFAULT_REGION  = 'ap-southeast-2'
        EKS_CLUSTER_NAME    = 'challenge-eks-cluster'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/jeffmeager/K8s.git', branch: 'main'
            }
        }

        stage('Terraform Init') {
            steps {
                
                dir('terraform') {
                    sh '''
                    terraform init -backend-config="bucket=jeffmeager-challenge-terraform-state-bucket" \
                                    -backend-config="key=wiz-challenge/terraform.tfstate" \
                                    -backend-config="region=${AWS_DEFAULT_REGION}" \
                                    -backend-config="profile=${AWS_PROFILE}"
                    '''
                
                }
                }
            }
            
        stage('Terraform Apply') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'rds-db-username', variable: 'TF_VAR_db_username'),
                            string(credentialsId: 'rds-db-password', variable: 'TF_VAR_db_password')
                            ]) {
                                dir('terraform') {
                                    sh '''
                                        terraform apply -auto-approve \
                                        -var="region=${AWS_DEFAULT_REGION}" \
                                        -var="profile=${AWS_PROFILE}"
                                    '''
                                }
                        }
                    }       
        }

        stage('Configure kubectl') {
            steps {
                sh '''
                    echo "🔧 Updating kubeconfig..."
                    aws eks --region ${AWS_DEFAULT_REGION} \
                      update-kubeconfig \
                      --name ${EKS_CLUSTER_NAME} \
                      --profile ${AWS_PROFILE}
                '''
            }
        }
        
        stage('Deploy WebApp') {
            steps {
                dir('kubernetes/deployments') {
                    sh 'kubectl apply -f webapp-deployment.yaml'
                }
                dir('kubernetes/services') {
                    sh 'kubectl apply -f webapp-service.yaml'
                }
            }
        }

        stage('Install CSI Driver and AWS Provider') {
            steps {
                withEnv(["AWS_PROFILE=devops-admin", "AWS_DEFAULT_REGION=ap-southeast-2"]) {
                    sh '''
                        echo "📦 Adding Helm repos..."
                        helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts || true
                        helm repo add aws-secrets-provider https://aws.github.io/secrets-store-csi-driver-provider-aws || true
                        helm repo update

                        echo "🔍 Checking if CSI Driver is already installed..."
                        if ! helm status csi-secrets-store -n kube-system > /dev/null 2>&1; then
                            echo "🚀 Installing CSI Driver..."
                            helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
                            --namespace kube-system \
                            --version 1.3.4 \
                            --create-namespace \
                            --wait \
                            --set syncSecret.enabled=true \
                            --set enableSecretRotation=true \
                            --set enableCSIStorageCapacity=true
                        else
                            echo "✅ CSI Driver already installed. Skipping."
                        fi

                        echo "🔍 Checking if AWS Provider is already installed..."
                        if ! helm status secrets-store-csi-driver-provider-aws -n kube-system > /dev/null 2>&1; then
                            echo "🔐 Installing AWS Provider..."
                            helm install secrets-store-csi-driver-provider-aws aws-secrets-provider/secrets-store-csi-driver-provider-aws \
                            --namespace kube-system \
                            --version 0.2.0 \
                            --wait
                        else
                            echo "✅ AWS Provider already installed. Skipping."
                        fi
                    '''
                }
            }
        }


    }

    post {
        success {
            echo '🚀 Infrastructure and workloads successfully deployed'
        }
        failure {
            echo '⚠️ Deployment encountered issues'
        }
    }

}