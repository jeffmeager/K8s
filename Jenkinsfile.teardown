// This Jenkinsfile is designed to tear down the infrastructure and workloads created in the previous stages.
// It includes stages to configure kubectl, delete the web application, initialize Terraform, and destroy the infrastructure.
// The post section provides feedback on the success or failure of the teardown process.
// The use of `withCredentials` ensures that sensitive information like database credentials are handled securely.
// The script uses `|| true` to ignore errors when deleting resources that may not exist, allowing the pipeline to continue smoothly.
// The `terraform init` command is configured to use a specific S3 bucket for state management, ensuring that the state is consistent across runs.
// The `terraform destroy` command is used to clean up all resources created by Terraform, ensuring that the environment is returned to a clean state.
// The pipeline is structured to run on any available agent, making it flexible for different Jenkins environments.
// The environment variables are set to ensure that the correct AWS profile and region are used throughout the pipeline.


pipeline {
    agent any

    environment {
        PATH                = "/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
        AWS_PROFILE         = 'devops-admin'
        AWS_DEFAULT_REGION  = 'ap-southeast-2'
        EKS_CLUSTER_NAME    = 'challenge-eks-cluster'
    }

    stages {
        stage('Configure kubectl') {
            steps {
                sh '''
                    echo "üîç Checking if EKS cluster '${EKS_CLUSTER_NAME}' exists..."
                    if aws eks describe-cluster --name ${EKS_CLUSTER_NAME} --region ${AWS_DEFAULT_REGION} --profile ${AWS_PROFILE} >/dev/null 2>&1; then
                    echo "‚úÖ Cluster found. Updating kubeconfig..."
                    aws eks update-kubeconfig \
                        --name ${EKS_CLUSTER_NAME} \
                        --region ${AWS_DEFAULT_REGION} \
                        --profile ${AWS_PROFILE}
                    else
                    echo "‚ö†Ô∏è Cluster '${EKS_CLUSTER_NAME}' not found. Skipping kubeconfig update."
                    fi
                '''
            }
        }

        stage('Delete WebApp and CSI Helm Charts') {
            steps {
                dir('kubernetes/services') {
                    sh 'kubectl delete -f webapp-service.yaml || true'
                }
                dir('kubernetes/deployments') {
                    sh 'kubectl delete -f webapp-deployment.yaml || true'
                }

                // Helm chart cleanup
                sh '''
                    echo "üßπ Uninstalling Helm charts..."
                    helm uninstall csi-secrets-store -n kube-system || true
                    helm uninstall secrets-store-csi-driver-provider-aws -n kube-system || true
                '''
            }
        }

        stage('Terraform Init') {
            steps {
                
                dir('terraform') {
                    sh '''
                    terraform init -backend-config="bucket=jeffmeager-challenge-terraform-state-bucket" \
                                    -backend-config="key=wiz-challenge/terraform.tfstate" \
                                    -backend-config="region=${AWS_DEFAULT_REGION}" \
                                    -backend-config="profile=${AWS_PROFILE}"
                    '''           
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                withCredentials([
                    string(credentialsId: 'rds-db-username', variable: 'TF_VAR_db_username'),
                    string(credentialsId: 'rds-db-password', variable: 'TF_VAR_db_password')
                    ]) {
                        dir('terraform') {
                            sh '''
                                terraform destroy -auto-approve \
                                -var="region=${AWS_DEFAULT_REGION}" \
                                -var="profile=${AWS_PROFILE}"
                            '''
                        }
                }
            }       
        }
        // Force delete the secret so it can be reused
        stage('Force delete secrets') {
                steps {
                    sh '''
                        aws secretsmanager delete-secret \
                            --secret-id wordpress-db-password \
                            --force-delete-without-recovery \
                            --region ap-southeast-2 \
                            --profile devops-admin
                    '''
                }
        }
    }

    post {
        success {
            echo 'üßπ Infrastructure and workloads successfully cleaned up'
        }
        failure {
            echo '‚ö†Ô∏è Something went wrong while tearing down'
        }
    }
}
